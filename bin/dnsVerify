#!/usr/bin/perl -Tw
#
# dnsVerify
#
# This verifies that the hosts file used by dnsBuild does not contain any
# errors. At this time it does not take any corrective action, only warning
# messages are issued.
#
# $Id: dnsVerify,v 1.4 1998/03/22 11:12:26 jauderho Exp jauderho $
# (C) Copyright 1997,1998 Jauder Ho <jauderho@carumba.com>
#
# 060297 jauderho [created]
# 060397 jauderho [new parsing engine and large chunks rewritten]
# 080497 jauderho [changed for usage in transmeta]
#

require "/var/named/etc/dennis.conf";

# Declare my subroutines and variables
sub checkIP;
sub checkHosts;

#$ENV{PATH} = "/bin";
#my $dnshome =		"/home/jauderho/named";
#my $fileHosts =	"$dnshome/etc/hosts";

my @dnsArray;
my @outArray;

# Read only the IP lines in from the file; ignore everything else
open(DNS,"$fileHosts") or die "Cannot open $fileHosts\n";
while (<DNS>) {
	next if /^(#|\s$)/;
        s/#.*$//;
        chomp($_);
        push(@dnsArray,$_);
}
close(DNS);

checkIP;	# Check the IP addresses
checkHosts;	# Check the host side of things

# Print everything
print join("\n", sort @outArray), "\n" if defined @outArray;

# The End!

sub checkIP {
	my %seenIP;

	for (@dnsArray) {
		my $ip;
		my @names;

		($ip,@names) = split;

		# Check for duplicate IPs
		$seenIP{$ip}++;	
		
		if ($seenIP{$ip} > 1) {
			push(@outArray,"WARNING: dulplicate IP\t    $ip");
		}

		# The line has to start with an IP address
		if ($ip !~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)/) {
			warn "WARNING: bad format\t    $_\n";	
			next;
		}

		# Check for valid IPs
		if ($1 < 0 or $1 > 255
		or  $2 < 0 or $2 > 255
		or  $3 < 0 or $3 > 255
		or  $4 < 0 or $4 > 255) {
			warn "WARNING: invalid IP\t    $ip\n";
		}
	}
}

sub checkHosts {
	my %dupHosts;
	my %holderHosts;
	my %printedHosts;
	my %seenHosts;

	for (@dnsArray) {
		my $ip;
		my @names;

		($ip,@names) = split; 

		# Check that there IS a hostname
		if (! defined($names[0])) {
			push(@outArray,"WARNING: missing hostname   $ip");
			next;
		}
		
		for (@names) {
			$seenHosts{$_}++;
			$holderHosts{$_} = $ip unless defined($holderHosts{$_});

			# Variable juggling to get multiple IPs for a given
			# hostname
			if ($seenHosts{$_} > 1) {
				$dupHosts{$_} = "$holderHosts{$_} "
				unless defined($dupHosts{$_});

				$dupHosts{$_} = $dupHosts{$_} . "$ip "
				unless ($dupHosts{$_} =~ /$ip/);
			}
			
			# Check for illegal chars in hostnames
			#if (/(_|#)/) {
			#	push(@outArray,"WARNING: bad hostname\t    $_")
			#	unless $printedHosts{$_}++;
			#} 
		}
	}

	# Store it in @outArray
	for (keys %dupHosts) {
		push(@outArray,"WARNING: multiple IP\t    " . pack("A16",$_) .
		$dupHosts{$_}); 
	}
}
